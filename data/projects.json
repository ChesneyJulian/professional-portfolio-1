{
  "projects": [
    {
      "name": "Maintenance Manatee",
      "description": "Organizing and keeping track of your vehicle(s)'s maintenance can be difficult and tedious. To address this problem, a group of collaborators and myself created the website Maintenance Manatee. It is a simple, concise application that allows users to create accounts, add vehicles to the account, and create posts detailing maintenance work done for the vehicle. This gives users the ability to not only track what maintenance work has been done, but also the cost of the work, when/where the work was done, and any other important details they may want to refer to. Maintenance Manatee was written and developed by four collaborators and utilizes JavaScript, Express.js, Handlebars.js, Tailwind CSS, and MySQL to store, manipulate, and display data. The app follows the MVC paradigm and is deployed using Heroku.",
      "skills": [
        "Collaborative Work", "Version Control", "Responsive Design", "Designing APIs", "JavaScript", "Sequelize", "MySQL", "Handlebars", "MVC Paradigm", "Node.js", "Express.js", "Express-session", "bcrypt", "Heroku"
      ],
      "methods": "The Maintenance Manatee follows the Model-View-Controller (MVC) paradigm. Models are defined for user accounts, vehicles, and posts using Sequelize and Connect-session-sequelize. User data is also stored using express-session. This gives the app a welcoming presentation by displaying custom headings and info for users once logged in to their account. The bcrypt package from Node.js is utilized to ensure that user passwords are protected within the database. The app's views are constructed of Handlebars templates with Tailwind CSS which easily and aesthetically renders data from the database. The responsive design of Maintenance Manatee means that the app looks great from any device while ensuring optimal functionality. Server routes stored in the controllers directory are created through the Express.js router. These routes are responsible for rendering pages as well as sending requests to the Maintenance Mantee's API for data manipulation. My main role throughout this project was to create and maintain all routes and models. However, I also contributed to the creation of client-side JavaScript, as well as formatting and styling using Tailwind CSS.",
      "github": "https://github.com/cdgonzo23/maintenance-manatee",
      "url": "https://maintenance-manatee-20230807-e071f072b462.herokuapp.com/",
      "image": "/images/maintenance-manatee.png"

    },
    {
      "name": "Night-In Generator",
      "description": "This application takes the decision making out of a night at home. Night-In Generator allows users to receive randomly generated options for a meal, a drink, and a movie. My partner and I wanted to create a solution for people who enjoy having a movie and meal at home, but who struggle to come up with ideas for what to make, what to drink, or what to watch. This clean, easy to use website not only suggests options for you, but it also renders other info you may need, such as a recipe, by utlizing open database APIs. Local storage is used to store the most recent search results to the home screen. This functionality, coupled with the option to choose specifically what category you want generated, gives users the ability to customize their results to fit their personal needs. This project was developed by one other engineer and myself using JavaScript, HTML, Bootstrap, and third-party API's.",
      "skills": ["Collaborative Work", "Version Control", "Responsive Design", "JavaScript", "HTML", "Bootstrap", "Document Object Model (DOM)", "Third-party APIs", "Local Storage"],
      "methods": "Night-In Generator uses client side JavaScript for the majority of its functionality. The JavaScript is responsible for event listening, making fetch requests to third-party APIs, rendering HTML elements using the DOM, and storing relevent data to Local Storage. Because this project written by myself and one other person, we were able to discuss every step in the process of developing the code for this website. One thing I have learned from this is how helpful it can be to hear other developer's ideas and methods when writing code. However, for larger scale projects, delegating tasks would be much more efficient as discussion does slow down development in some cases.",
      "github": "https://github.com/cdgonzo23/night-in-generator/",
      "url": "https://cdgonzo23.github.io/night-in-generator/",
      "image": "/images/night-in-generator.png"
    },
    {
      "name": "Tech Blog",
      "description": "The Tech Blog application is a CMS-style blog site that allows users to view posts. The app also allows users to create and delete posts as well as leave comments on other users' posts. However, this functionality is only offered once they have created an account. User info, posts, and comments are stored in the application's MySQL database. By utlizing Pico CSS and Handlebars, I was able to create Tech Blog with a light and airy aesthetic and a naturally flowing UI/UX that is inviting for users across all devices. Responsive design is key for applications like blog sites so that the site is accessible, and functional, for users wherever they are. This application also follows the MVC Paradigm with technologies such as Node.js, Express.js, Express-session, MySQL2, Sequelize, Connect-session-sequelize, and bcrypt for optimal functionality.",
      "skills": ["Version Control", "Responsive Design", "Content Management System (CMS)", "Designing APIs", "JavaScript", "Sequelize", "MySQL", "Handlebars", "Pico CSS", "MVC Paradigm", "Node.js", "Express.js", "Express-session", "bcrypt", "Heroku"],
      "methods": "Tech Blog was an independent project that I fully developed from start to finish. Because this was one of my first projects following the MVC Paradigm with a connected database, I chose to create the app in small steps. I began initializing the User, Post, and Comment models for the database and using Express Router to create routes to render data from the models. I also created handlebars templates to render the data using express-handlebars. After finishing the basic structure of the app, I focused on creating the relationships between the models as well as API routes needed to manipulate data within the database based on user input. In addition to this, I implemented authorization functions that prevent users from creating posts or leaving comments without creating or logging in to an account as well as the bcrypt package to secure sensitive user passwords. I also utlized  while including handlebars helper functions to render dates in a typical month-day-year format. I then moved forward by developing each api route and the corresponding handlebars elements in succession. This approach was helpful to me because it solidified the patterns of creating API routes that connect to the database on the application. Because of the repetition involved with creating Tech Blog, moving forward with new projects following the MVC Paradigm became much easier.",
      "github": "https://github.com/ChesneyJulian/tech-blog",
      "url": "https://mvc-tech-blog-2023-86b27f515ccd.herokuapp.com/",
      "image": "/images/tech-blog-screenshot.png"
    },
    {
      "name": "E-Commerce Backend",
      "description": "This application is the backend for an e-commerce website. By using API testing technologies, such as Insomnia Core, users are able to get, post, update, and delete data from Categories, Products, and Tags models in a MySQL database. This project, while without a user interface, is optimally functional and creates the foundation of a e-commerce site. Implementing models, relationships between models, and API routes efficiently is paramount to any large scale application and is demonstrated through this project using technologies such as Node.js, Express.js, MySQL, and Sequelize.",
      "skills": ["Version Control", "Revising Starter Code", "MySQL", "Sequelize", "Designing APIs", "Backend Development"],
      "methods": "The goal of the E-Commerce Backend was to modify and add to starting code in order to make the application fully functional for the project's acceptance criteria. I was tasked with defining data within each model and establishing the relationship between models. These relationships are fundamental to backend applications like this because of how dependent each model is on other models. For example, a category has many products, and a product belongs to many tags. Similarly, a tag belong to many products. The relationship between products and tags is defined through the ProductTag model. This relationship allows for cascading when one item is deleted or edited. Furthermore, I was responsible for creating routes to handle getting, creating, editing, and deleting all models within the database. This project taught me the importance of relationships between models and how relating models are affected when one is deleted, edited, or created. This project also highlights the usefulness of API testing softwares, such as Insomnia Core, to ensure optimal functionality of API routes before connecting them to a GUI. To see this testing in action, visit the GitHub repository and follow the link in the README.md to the walkthrough video.",
      "github": "https://github.com/ChesneyJulian/e-commerce-back-end",
      "image": "/images/e-commerce-backend.png"
    },
    {
      "name": "Professional README.md Generator",
      "description": "The Professional README.md Generator is a fun, helpful project that minimizes the work required to create a professional READEM.md file. The project functions fully through the command line by running a prompt sequence derived from the Node.js package Inquirer. After running the application and answering all the given prompts, the application then renders a fully formatted README.md file using the input data to an output folder in the project's directory. That way, users can easily add information to a README document in markdown format by simply entering the desired fields into the terminal. The project even allows users to choose a license for the project and renders a corresponding license badge. The goal of this project is to streamline and render a professionally formatted README.md that users may implement in their GitHub repositories.",
      "skills": ["JavaScript", "Node.js", "Inquirer", "Template Literals", "Node:fs"],
      "methods": "I began this project by first creating a template markdown file that the output of the program should mimic. By using this as a reference, I was able to fill the Inquirer prompt with an array of question objects pertaining to each section of the README.md. Then I developed a js file responsible for rendering the markdown file as well as optional links/badges corresponding to data from the prompt system. This file contains the generateMarkdown file which inserts the data from the prompt into a template literal. The template literal also invokes functions for properly rendering a license badge, a link to the license's webpage, and a navigation link to the license section. This is important because some projects will not contain licenses and adding this functionality prevents unneccessary/empty links from rendering in the README.md. To see the Professional README.md Generator in action, visit the GitHub repository and follow the link to the walk through video in the project's README.",
      "github": "https://github.com/ChesneyJulian/professional-readme-generator/",
      "image": "/images/README-generator.png"
    },
    {
      "name": "Weather Dashboard",
      "description": "Weather Dashboard is an interactive, weather forecast application. Users are able to search for a city in the United States and will receive the city's current weather conditions as well as a five-day forecast. Users' previous searches are also stored to local storage so that they appear in a section titled 'Past Searches' upon loading the webpage. The Weather Dashboard is responsive across screen sizes which makes this the perfect app to use while on the go. The website utlizes Bootstrap CSS for a bright and simple UI that follows what users would expect from a weather app. Weather Dashboard utilizes data from the Open Weather Map API to ensure that the correct, updated data is always displayed.",
      "skills": ["Version Control", "Responsive Design", "JavaScript", "Document Object Model (DOM)", "Bootstrap", "Third-party APIs", "Local Storage"],
      "methods": "Weather Dashboard utilizes two fetch requests to render data from Open Weather Map API: the Current Weather Data API and the Forecast API. The HTML elements responsible for displaying data from these APIs are generated using JavaScript and the Document Object Model. Local Storage is implemented to store the user's past searches for easier access to search results. The website uses the Bootstrap theme Cerulean for styling and responsiveness.",
      "github": "https://github.com/ChesneyJulian/weather-dashboard/",
      "url": "https://github.com/ChesneyJulian/weather-dashboard/",
      "image": "/images/weather-dashboard.png"
    }
  ]
}